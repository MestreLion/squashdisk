#!/bin/bash
#
# squashdisk - create compressed mountable disk and partition images
#
# This file is part of squashdisk, see <https://github.com/MestreLion/squashdisk>
# Copyright (C) 2023 Rodrigo Silva (MestreLion) <linux@rodrigosilva.com>
# License: GPLv3 or later, at your choice. See <http://www.gnu.org/licenses/gpl>
#
# Requirements and associated Debian/Ubuntu package:
# - mksquashfs (squashfs-tools)
# - pv
# - numfmt (coreutils)
# - udisksctl (udisks2)
#
# References (from oldest to best):
# https://ubuntuforums.org/showthread.php?t=1291804
# https://ubuntuforums.org/showthread.php?t=2240493
# https://askubuntu.com/a/847423/11015
# https://unix.stackexchange.com/a/75590/4919
#
# Wash partitions:
# sudo dd if=/dev/zero of=/dev/sdd4 bs=1M status=progress
#
# List suitable (block) devices for bash-completion:
# lsblk -pnro name
#
# Expose/mount partitions: losetup
# https://unix.stackexchange.com/questions/31669
#------------------------------------------------------------------------------

set -Eeuo pipefail  # exit on any error
trap '>&2 echo "error: line $LINENO, status $?: $BASH_COMMAND"' ERR

#------------------------------------------------------------------------------

source=
target=
srcdir=  # if info, must be writable

block=1Mi  # Block size. 1MiB is a good default, usually better than 32M for SSDs
comp=zstd
user=0
group=0
mode=444  # octal mode for the disk image created inside the squashfs file
fsroot_mode=775
wash=0

size=0
autosudo=1
force=0
info=1

verbose=0

#------------------------------------------------------------------------------

self=${0##*/}
here=$(dirname "$(readlink -f "$0")")

#------------------------------------------------------------------------------

fatal()   { if (($#)); then echo "$self: error: $*" >&2; fi; exit 1; }
message() { if (($# && verbose)); then printf '%s\n' "$1"; fi; }
argerr()  { printf "%s: %s\n" "$self" "${1:-error}" >&2; usage 1; }
invalid() { argerr "invalid ${2:-option}: ${1:-}"; }
missing() { argerr "missing ${1:+$1 }argument${2:+ from $2}."; }
sizefmt() { [[ "$1" ]] || missing "${3:-SIZE}" "${2:-}";
            numfmt --from=auto -- "$1" || fatal; }
escape()  { printf '%q' "$1"; }  # $@ will not work as expected
exists()  { type "$@" >/dev/null 2>&1; }
integer() { [[ "$1" =~ ^[0-9]+$ ]]; }
trace()   { local s; set -x +e; "$@"; { s=$?; set +x -e; } 2>&-; return $s; }
require() {
	local cmd=$1
	local pkg=${2:-$cmd}
	local msg='' eol=''
	if exists "$cmd"; then return; fi
	if [[ -x /usr/lib/command-not-found ]]; then
		/usr/lib/command-not-found -- "$cmd" || true
		eol='\n'
	else
		echo "Required command '${cmd}' is not installed." >&2
		if [[ "$pkg" != '-' ]]; then
			msg="with:\n\tsudo apt install ${pkg}\n"
		fi
	fi
	echo -e "Please install ${cmd} ${msg}and try again.${eol}" >&2
	exit 1
}
check_version() {
	local vref=$1
	local vcur=$(mksquashfs -version | head -n1 | cut -d' ' -f3)
	local vmax=$(printf "%s\n" "$vcur" "$vref" | LC_ALL=C sort --version-sort | tail -n1)
	if [[ "$vmax" != "$vcur" ]]; then return 1; fi
}

device_name() {
	local source=$1
	# udisksctl info -b "$source" | grep '^ *Drive:' | cut -d\' -f2
	udevadm info --query=property "$source" | grep '^ID_SERIAL=' | cut -d= -f2
	local line
	declare -A dev
	while IFS= read -r line; do dev[${line%%=*}]=${line#*=}; done < <(
		udevadm info --query=property "$source"
	)
#lsblk -pbd /dev/{sd?,nvme0n1} -o TYPE,SIZE,VENDOR,MODEL,SERIAL,LABEL,PARTLABEL,FSTYPE,RM,ROTA
#TYPE          SIZE VENDOR   MODEL                                    SERIAL          LABEL              PARTLABEL FSTYPE  RM ROTA
#disk 4000787030016 ATA      ST4000DM004-2CV1                         ZFN46CS1                                              0    1
#disk 4000787030016 ATA      ST4000DM004-2CV1                         ZTT363LZ                                              0    1
#disk 8001563222016 ATA      ST8000DM004-2CX1                         ZR121M38                                              0    1
#disk  512110190592 ATA      SSD 512GB                                202101280011                                          0    0
#disk    8054112256 Generic  Flash Disk                               DFB1FB32        Ubuntu Unity 22.04           iso9660  1    1
#disk 2000398934016          Samsung SSD 970 EVO Plus 2TB             S59CNM0R904308X                                       0    0

# udevadm does not give SIZE for disks (and only sectors for partitions
# lsblk lies about VENDOR, may say "ATA"/"ATAPI" for Hard/CD Drives without ID_VENDOR

# Disk name:
# {LABEL - }SIZE {VENDOR }{MODEL}{-SERIAL}

# Partition name:
# LABEL{ - }PARTLABEL

# Size:
# numfmt --to=si --round=down --suffix=B --format '%.0f' 8054112256
}


device_partitions() {
	local device=$1
	sudo lsblk "$device" --list --noheadings --paths --output NAME,TYPE,FSTYPE |
		awk '$2 ~ "part" && $3'
}

#------------------------------------------------------------------------------

usage() {
	if [[ "${1:-}" ]] ; then exec >&2; fi
	cat <<-USAGE
	Usage: $self [options] [-o OUTPUT_FILE|-O OUTPUT_DIR] SOURCE
	USAGE
	if [[ "${1:-}" ]] ; then
		cat <<- USAGE
		Try '$self --help' for more information.
		USAGE
		exit 1
	fi
	cat <<-USAGE

	Create compressed mountable disk and partition images

	Options:
	  -h|--help      - show this page.
	  -v|--verbose   - print more details about what is being done.
	  -f|--force     - force operation on mounted partitions or non-disk/patition inputs
	  -S|--no-sudo   - do not use 'sudo' for reading SOURCE devices even if needed
	  -s|--size SIZE - number of BYTES (*NOT* blocks!) to read from SOURCE.
	                   0 means the whole input [Default: $size]
	  -B|--block-size SIZE - read SIZE blocks at a time. [Default: $block]
	  -c|--compressor COMP - select COMP compressor [Default: $comp]
	  -i|--include DIR     - include contents of directory DIR in filesystem root

	  -o|--output     FILE Create output file as FILE
	  -O|--output-dir DIR  Create output file in DIR

	By default create file in the current directory, with '.sqsh' extension
	and name based on disk/partition capacity, model and serial number.

	All SIZE units are parsed through 'numfmt' auto mode, so SI suffixes such
	as K, M, G are allowed. '1K' means 1000; use 'Ki' (and 'Mi', 'Gi', etc)
	for 1024-based units.

	Copyright (C) 2023 Rodrigo Silva (MestreLion) <linux@rodrigosilva.com>
	License: GPLv3 or later. See <http://www.gnu.org/licenses/gpl.html>
	USAGE
	exit 0
}

# Pre-parse for -h|--help, ignoring if after '--'
for arg in "$@"; do
	if [[ "$arg" == '--' ]]; then break; fi
	if [[ "$arg" == "-h" || "$arg" == "--help" ]]; then usage; fi
done
args=()
while (($#)); do
	# shellcheck disable=SC2221,SC2222
	case "$1" in
	-f|--force  ) force=1;;
	-S|--no-sudo) autosudo=0;;
	-B|--block-size) shift; block=${1:-};;
	-s|--size      ) shift; size=${1:-};;
	-o|--output    ) shift; outfile=${1:-};;
	-O|--output-dir) shift; outdir=${1:-};;
	-c|--compressor) shift; comp=${1:-};;
	-i|--include   ) shift; srcdir=${1:-};;
	--block-size=*) block=${1#*=};;
	--size=*      ) size=${1#*=};;
	--output=*    ) outfile=${1#*=};;
	--output-dir=*) outdir=${1#*=};;
	--compressor=*) comp=${1#*=};;
	--include=*   ) srcdir=${1#*=};;
	--) shift; break;;
	-*) invalid "$1";;
	* ) args+=( "$1" );;
	esac
	shift || break
done
args+=( "$@" )

#------------------------------------------------------------------------------
require mksquashfs squashfs-tools
require pv
require numfmt coreutils
require udisksctl udisks2
require lsblk util-linux

# mksquashfs 4.4 (2019-08-29) added -root-{mode,uid,gid} and -comp zstd
if ! check_version 4.4; then fatal "mksquashfs version 4.4 or greater is required"; fi

if ((info)); then
	require smartctl smartmontools
	require fdisk fdisk
	require sfdisk fdisk
fi

case ${#args[@]} in
	0) missing SOURCE;;
	1) source=${args[0]}; if [[ -z "$source" ]]; then missing SOURCE; fi;;
	*) invalid "${args[1]}" argument;;
esac

if [[ "${outfile:-}" ]]; then
	if [[ "${outdir:-}" ]]; then
		argerr "--output and --output-dir are mutually exclusive"
	fi
	target=$outfile
else
	outdir=${outdir:-.}
	if [[ "$source" == '-' ]]; then
		name=stdin
	elif [[ -b "$source" ]]; then
		name=$(device_name "$source")
	else
		name=$source
	fi
	target=${outdir%/}/${name##*/}.sqsh
fi

block=$(sizefmt "$block" '--block-size') || exit
size=$( sizefmt "$size"  '--size'      ) || exit

uid=$user
gid=$group
if ! integer "$uid"; then uid=$(id -u "$uid"); fi
if ! integer "$gid"; then gid=$(grep "^${gid}:" /etc/group | cut -d: -f3); fi

pvcmd=(dd status=progress iflag=fullblock,count_bytes bs="$block")
if ((size)); then
	pvcmd+=(count="$size")
fi
## as modern mksquashfs captures stderr from pv, we need to force it if in a terminal
#if [[ -t 2 ]]; then
#	pvcmd+=(--force)
#fi
if ((autosudo)) && [[ "$source" != '-' && -e "$source" && ! -r "$source" ]]; then
	pvcmd=(sudo "${pvcmd[@]}")
fi
pvcmd+=(if="$(escape "$source")")

pseudo="disk.img f $mode $uid $gid ${pvcmd[*]}"

permopts=(
	-root-mode "$fsroot_mode"
	-root-uid "$uid"
	-root-gid "$gid"
	-force-uid "$uid"
	-force-gid "$gid"
)


if [[ "$srcdir" ]] && ! [[ -d "$srcdir" ]]; then
	argerr "--include argument is not a directory: $srcdir"
fi

#------------------------------------------------------------------------------
if ! ((force)); then
	if [[ -b "$source" ]] && grep -q "^$source" /proc/mounts; then
		fatal "$source seems to be (or contain) mounted partition(s)." \
			"Un-mount it first or use --force."
	fi
fi


if [[ -z "$srcdir" ]]; then
	srcdir=$(mktemp --directory) || fatal "could not create temp dir"
	trap 'rm -rf -- "$srcdir"' EXIT
fi

if ((info)); then
	infodir=${srcdir%/}/disk-info
	mkdir -p -- "$infodir"
	sudo fdisk  --list "$source" > "$infodir"/fdisk.txt    2>&1 || :
	sudo sfdisk --dump "$source" > "$infodir"/sfdisk.txt   2>&1 || :
	sudo smartctl -x   "$source" > "$infodir"/smartctl.txt 2>&1 || :
	sudo lsblk -OJpb   "$source" > "$infodir"/lsblk.txt    2>&1 || :
	udisksctl info -b  "$source" > "$infodir"/udiskctl.txt 2>&1 || :
fi

trap ERR  # disable error handling to allow graceful CTRL+C during mksquashfs
# Argument order matters! mksquashfs mandates: SOURCE(s)... TARGET [OPTIONS] [-p ...]
trace mksquashfs "$srcdir" "$target" "${permopts[@]}" -info -comp "$comp" -p "$pseudo"
