#!/bin/bash
#
# washdisk - "Wash" disk partitions by writing zeroes to filesystem empty space
#
# This file is part of squashdisk, see <https://github.com/MestreLion/squashdisk>
# Copyright (C) 2024 Rodrigo Silva (MestreLion) <linux@rodrigosilva.com>
# License: GPLv3 or later, at your choice. See <http://www.gnu.org/licenses/gpl>
#------------------------------------------------------------------------------

set -Eeuo pipefail  # exit on any error
trap '>&2 echo "error: line $LINENO, status $?: $BASH_COMMAND"' ERR

#------------------------------------------------------------------------------

device=${1:-}
verbose=1

# Loop vars
partition=
unmount=0
zero=
code=0

#------------------------------------------------------------------------------

bold()    { tput bold; echo "$@"; tput sgr0; }
red()     { tput setaf 1; bold "$@"; }
green()   { tput setaf 2; bold "$@"; }
title()   { if (($# && verbose)); then green '* ' "$@"; fi; }
message() { if (($# && verbose)); then bold "$@"; fi; }
error()   { if (($#)); then red "$@" >&2; fi; }
fatal()   { error "$@"; exit 1; }


cleanup() {
	rm -f -- "$zero"
	if ((unmount)); then
		unmount=0
		udisksctl unmount --block-device "$partition" || true
	fi
}

wash_partition() {
	local mountpoint space spare=10

	title "Writing zeroes to empty space of ${partition}"
	if udisksctl mount --block-device "$partition" 2>/dev/null; then unmount=1; fi
	mountpoint=$(
		udisksctl info --block-device "$partition" |
		grep '^ *MountPoints:' |
		sed 's/^ *MountPoints: *//'
	)
	if [[ -z "$mountpoint" ]]; then
		error "${partition}: could not mount"
		return 1
	fi
	space=$(( $(df -B1M --output=avail "$mountpoint" | tail -n1) - spare ))
	if [[ -z "$space" ]] || (( space < 1 )); then
		message "empty space less than ${space} MiB, ignoring"
		return
	fi
	zero=$(mktemp -- "$mountpoint"/zero.XXXXXXXXXX.tmp) || {
		error "${partition}: could not create temp file on ${mountpoint}"
		return 2
	}
	message "${partition}: Filling empty space with zeroes: ${space} MiB"
	pv -Ss "${space}M" /dev/zero > "$zero"
	sync --file-system "$mountpoint"
	rm -- "$zero"
	sync --file-system "$mountpoint"
}


#------------------------------------------------------------------------------

if [[ -z "$device" ]]; then fatal "Usage: washdisk DEVICE"; fi
trap 'cleanup' EXIT

while IFS= read -r partition; do
	wash_partition || code=$?
	cleanup
done < <(
	lsblk "$device" -lnpb --output NAME,RO,FSTYPE |
		awk '$2 == 0 && $3 {print $1}'
)
exit "$code"
